project.afterEvaluate { project ->
    setupAndroidReporting()
}

def setupAndroidReporting() {
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    def buildTypes = android.buildTypes.collect { type -> type.name }

    buildTypes.each { buildTypeName ->
        def testTaskName = "test${buildTypeName.capitalize()}UnitTest"

        task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports on the ${buildTypeName.capitalize()} build."

            def fileFilter = [
                    // data binding
                    'android/databinding/**/*.class',
                    '**/android/databinding/*Binding.class',
                    '**/android/databinding/*',
                    '**/androidx/databinding/*',
                    '**/BR.*',
                    // android
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*',
                    // kotlin
                    '**/*MapperImpl*.*',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/BuildConfig.*',
                    '**/*Component*.*',
                    '**/*BR*.*',
                    '**/Manifest*.*',
                    '**/*$Lambda$*.*',
                    '**/*Companion*.*',
                    '**/*MembersInjector*.*',
                    '**/*_MembersInjector.class',
                    '**/*_Factory*.*',
                    '**/*_Provide*Factory*.*',
                    '**/*Extensions*.*',
                    // sealed and data classes
                    '**/*$Result.*',
                    '**/*$Result$*.*',
            ]

            def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$buildTypeName/classes", excludes: fileFilter)
            def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$buildTypeName", excludes: fileFilter)
            classDirectories.from = files([javaTree], [kotlinTree])
            executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            def coverageSourceDirs = ["src/main/java", "src/$buildTypeName/java"]

            sourceDirectories.setFrom(files(coverageSourceDirs))
            additionalSourceDirs.setFrom(files(coverageSourceDirs))

            reports {
                csv.enabled false
                xml.enabled true
                html.enabled true
            }
        }
    }
}